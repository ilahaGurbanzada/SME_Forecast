import streamlit as st
from data_utils import load_data
from forecasting import forecast_revenue, generate_advice
from visuals import plot_revenue, plot_forecast, plot_dynamic_metric

st.set_page_config(page_title="ü§ñ AI –ü—Ä–æ–≥–Ω–æ–∑ –î–æ—Ö–æ–¥–æ–≤", layout="wide")
st.title("üìä –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ö–æ–¥–æ–≤ –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ —Å AI-–ø–æ–º–æ—â–Ω–∏–∫–æ–º")

st.sidebar.header("üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV", type=["csv"])

if uploaded_file:
    df = load_data(uploaded_file)
    st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

    st.subheader("üìä –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns.tolist()
    default_col = 'Net_Income' if 'Net_Income' in numeric_cols else numeric_cols[0]

    metric_option = st.selectbox(
        "–ß—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ?",
        options=numeric_cols,
        index=numeric_cols.index(default_col) if default_col in numeric_cols else 0
    )

    st.plotly_chart(plot_dynamic_metric(df, metric_option), use_container_width=True)

    st.subheader("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤")
    forecast_df = forecast_revenue(df)
    st.plotly_chart(plot_forecast(forecast_df), use_container_width=True)

    st.subheader("üí° AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    st.info(generate_advice(forecast_df), icon="üìå")

    with st.expander("üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
        st.download_button("–°–∫–∞—á–∞—Ç—å –∫–∞–∫ CSV", forecast_df.to_csv(index=False), file_name="ai_forecast.csv")
else:
    st.warning("üëà –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å–ª–µ–≤–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")
